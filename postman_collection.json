{
	"info": {
		"_postman_id": "39d4e33e-131c-4130-b533-7ab4df29a4d7",
		"name": "processionCheckIn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8914485"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    pm.expect(cleanResponse).to.equal('{\"message\": \"Database initialized\"}');",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/init",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"init"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    pm.expect(cleanResponse).to.equals('{\"message\": \"Database reset\"}');",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/reset",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "exampledata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    pm.expect(cleanResponse).to.equals('{\"message\": \"Example data overwritten\"}');",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/admin/exampledata",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"admin",
										"exampledata"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "groups",
					"item": [
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /\\[{\\\"id\\\": \\d+,\\\"name\\\": \\\".+\\\"}*\\]/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/groups/list",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"groups",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /{\\\"id\\\": \\d+}/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{group}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/groups",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"groups"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "locations",
					"item": [
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /\\[{\\\"id\\\": \\d+,\\\"name\\\": \\\".+\\\"}*\\]/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/locations/list",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /{\\\"id\\\": \\d+}/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{location}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/locations",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"locations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "seasons",
					"item": [
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /\\[{\\\"id\\\": \\d+,\\\"name\\\": \\\".+\\\"}*\\]/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/seasons/list",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"seasons",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "season",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /{\\\"id\\\": \\d+}/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{season}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/seasons",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"seasons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /\\[({\\\"id\\\": \\d+,\\\"firstname\\\": \\\".+\\\",\\\"lastname\\\": \\\".+\\\"},*)*\\]/;",
											"",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/list",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": ":id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /{\\\"id\\\": \\d+,\\\"firstname\\\": \\\".+\\\",\\\"lastname\\\": \\\".+\\\"}/;",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/{{userid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": ":id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    pm.expect(cleanResponse).to.equals('{\"message\": \"resource deleted\"}');",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/users/{{userid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										"{{userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body response is correct\", function () {",
											"    var cleanResponse = pm.response.text()",
											"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
											"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
											"    ",
											"    var re = /{\\\"id\\\": \\d+}/;",
											"    ",
											"    pm.expect(cleanResponse).to.match(re);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\": \"{{firstname}}\",\n    \"lastname\": \"{{lastname}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body response is correct\", function () {",
									"    var cleanResponse = pm.response.text()",
									"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
									"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
									"    ",
									"    pm.expect(cleanResponse).to.equals('{\"message\": \"pong\"}');",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/ping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body response is correct\", function () {",
									"    var cleanResponse = pm.response.text()",
									"        .replace(/^[^\\S\\r\\n]*/gm, '') // remove leading whitespaces",
									"        .replace(/(\\r\\n|\\n|\\r)/gm, ''); // remove line breaks",
									"    ",
									"    var re = /{\\\"commit\\\": \\\".*\\\",\\\"revision\\\": \\\".*\\\",\\\"version\\\": \\\".+\\\"/;",
									"    ",
									"    pm.expect(cleanResponse).to.match(re);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/version",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"version"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "firstname",
			"value": "Max",
			"type": "string"
		},
		{
			"key": "lastname",
			"value": "Musternann",
			"type": "string"
		},
		{
			"key": "group",
			"value": "Green Day",
			"type": "string"
		},
		{
			"key": "location",
			"value": "London",
			"type": "string"
		},
		{
			"key": "season",
			"value": "2023/24",
			"type": "string"
		}
	]
}